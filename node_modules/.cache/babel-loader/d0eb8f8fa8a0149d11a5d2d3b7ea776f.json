{"remainingRequest":"/Users/silan/Desktop/code/code/partTime/wine/svnapp/node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!/Users/silan/Desktop/code/code/partTime/wine/svnapp/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!/Users/silan/Desktop/code/code/partTime/wine/svnapp/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!/Users/silan/Desktop/code/code/partTime/wine/svnapp/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js??vue-loader-options!/Users/silan/Desktop/code/code/partTime/wine/svnapp/src/views/GoodsList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/silan/Desktop/code/code/partTime/wine/svnapp/src/views/GoodsList.vue","mtime":1574686859884},{"path":"/Users/silan/Desktop/code/code/partTime/wine/svnapp/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/silan/Desktop/code/code/partTime/wine/svnapp/node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/silan/Desktop/code/code/partTime/wine/svnapp/node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/silan/Desktop/code/code/partTime/wine/svnapp/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/silan/Desktop/code/code/partTime/wine/svnapp/node_modules/_vue-loader@15.7.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}